generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id          String              @id @default(cuid()) @map("id") @db.VarChar(255)
  name        String
  email       String              @unique
  class       String
  avatar      String?
  nfcCardId   String?             @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  attendance  AttendanceRecord[]
  grades      Grade[]
  enrollments StudentEnrollment[]

  @@map("students")
}

model Course {
  id          String              @id @default(cuid()) @map("id") @db.VarChar(255)
  name        String
  teacher     String
  schedule    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  attendance  AttendanceSession[]
  grades      Grade[]
  schedules   Schedule[]
  enrollments StudentEnrollment[]

  @@map("courses")
}

model Announcement {
  id        String   @id @default(cuid()) @map("id") @db.VarChar(255)
  title     String
  content   String   @db.Text
  author    String
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}

model AcademicYear {
  id          String     @id @default(cuid()) @map("id") @db.VarChar(255)
  year        String
  description String?
  isActive    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  schedules   Schedule[]
  semesters   Semester[]

  @@map("academic_years")
}

model Semester {
  id             String       @id @default(cuid()) @map("id") @db.VarChar(255)
  name           String
  startDate      DateTime
  endDate        DateTime
  academicYearId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  schedules      Schedule[]
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  @@index([academicYearId], map: "semesters_academicYearId_fkey")
  @@map("semesters")
}

model Schedule {
  id             String       @id @default(cuid()) @map("id") @db.VarChar(255)
  time           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYearId String
  class          String
  courseId       String
  dayOfWeek      DayOfWeek
  isActive       Boolean      @default(true)
  semesterId     String
  teacherName    String
  classroomId    String?
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  classroom      Classroom?   @relation(fields: [classroomId], references: [id])
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  semester       Semester     @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@unique([time, dayOfWeek, class, academicYearId, semesterId])
  @@index([academicYearId], map: "schedules_academicYearId_fkey")
  @@index([classroomId], map: "schedules_classroomId_fkey")
  @@index([courseId], map: "schedules_courseId_fkey")
  @@index([semesterId], map: "schedules_semesterId_fkey")
  @@map("schedules")
}

model Grade {
  id         String   @id @default(cuid()) @map("id") @db.VarChar(255)
  assignment String
  grade      Decimal  @db.Decimal(5, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  studentId  String
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "grades_courseId_fkey")
  @@index([studentId], map: "grades_studentId_fkey")
  @@map("grades")
}

model AttendanceSession {
  id          String             @id @default(cuid()) @map("id") @db.VarChar(255)
  courseId    String
  teacherName String
  class       String
  isActive    Boolean            @default(true)
  startTime   DateTime           @default(now())
  endTime     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  records     AttendanceRecord[]
  course      Course             @relation(fields: [courseId], references: [id])

  @@index([courseId], map: "attendance_sessions_courseId_fkey")
  @@map("attendance_sessions")
}

model AttendanceRecord {
  id        String            @id @default(cuid()) @map("id") @db.VarChar(255)
  sessionId String
  studentId String
  status    AttendanceStatus  @default(ABSENT)
  createdAt DateTime          @default(now())
  session   AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student   Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
  @@index([studentId], map: "attendance_records_studentId_fkey")
  @@map("attendance_records")
}

model StudentEnrollment {
  id         String   @id @default(cuid()) @map("id") @db.VarChar(255)
  studentId  String
  courseId   String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([courseId], map: "student_enrollments_courseId_fkey")
  @@map("student_enrollments")
}

model User {
  id        String   @id @default(cuid()) @map("id") @db.VarChar(255)
  name      String
  email     String   @unique
  password  String   @db.Text
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Location {
  id          String      @id @default(cuid()) @map("id") @db.VarChar(255)
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  classrooms  Classroom[]

  @@map("locations")
}

model Classroom {
  id          String     @id @default(cuid()) @map("id") @db.VarChar(255)
  name        String
  code        String     @unique
  locationId  String
  capacity    Int        @default(30)
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  location    Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  schedules   Schedule[]

  @@unique([locationId, code])
  @@map("classrooms")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}
