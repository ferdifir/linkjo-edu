// Schema Prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"  // atau provider lain seperti postgresql, sqlite, sqlserver
  url      = env("DATABASE_URL")
}

model Student {
  id          String   @id @default(cuid()) @map("id") @db.VarChar(255)
  name        String
  email       String   @unique
  class       String
  avatar      String?
  nfcCardId   String? @unique
  grades      Grade[]
  enrollments StudentEnrollment[]
  attendance  AttendanceRecord[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("students")
}

model Course {
 id           String           @id @default(cuid()) @map("id") @db.VarChar(255)
  name         String
 teacher      String
 schedule     String?
  grades       Grade[]
  enrollments StudentEnrollment[]
  schedules    Schedule[]       // Remove the old day-specific relations
  attendance   AttendanceSession[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  @@map("courses")
}

model Announcement {
  id        String   @id @default(cuid()) @map("id") @db.VarChar(255)
  title     String
  content   String   @db.Text
  author    String
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("announcements")
}

model AcademicYear {
  id          String    @id @default(cuid()) @map("id") @db.VarChar(255)
  year        String    // e.g., "2023/2024"
  description String?
  isActive    Boolean   @default(false)
  semesters   Semester[]
  schedules   Schedule[] // Add the reverse relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("academic_years")
}

model Semester {
  id            String    @id @default(cuid()) @map("id") @db.VarChar(255)
  name          String    // e.g., "Ganjil", "Genap"
  startDate     DateTime
  endDate       DateTime
  academicYearId String
  academicYear  AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("semesters")
}

model Schedule {
  id               String   @id @default(cuid()) @map("id") @db.VarChar(255)
  time             String   // e.g., "07:00-08:00"
  dayOfWeek        DayOfWeek
  courseId         String
 course           Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacherName      String
  class            String   // class identifier for this specific schedule
  academicYearId   String
 academicYear     AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  semesterId       String
  semester         Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  classroomId      String?
  classroom        Classroom? @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  isActive         Boolean @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("schedules")
  @@unique([time, dayOfWeek, class, academicYearId, semesterId]) // Ensures no time conflicts for same class in same semester
}

enum DayOfWeek {
  MONDAY
 TUESDAY
 WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Grade {
  id         String   @id @default(cuid()) @map("id") @db.VarChar(255)
  assignment String
 grade      Decimal  @db.Decimal(5, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relasi
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@map("grades")
}

model AttendanceSession {
  id         String           @id @default(cuid()) @map("id") @db.VarChar(255)
  courseId   String
  course     Course           @relation(fields: [courseId], references: [id])
  teacherName String
 class      String
 isActive   Boolean          @default(true)
  startTime  DateTime         @default(now())
  endTime    DateTime?
  records    AttendanceRecord[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  
  @@map("attendance_sessions")
}

model AttendanceRecord {
  id         String           @id @default(cuid()) @map("id") @db.VarChar(255)
  sessionId  String
  session    AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  studentId  String
  student    Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
 status     AttendanceStatus @default(ABSENT)
  createdAt  DateTime         @default(now())
  
  @@unique([sessionId, studentId])
  @@map("attendance_records")
}

model StudentEnrollment {
  id         String           @id @default(cuid()) @map("id") @db.VarChar(255)
  studentId  String
 student    Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  courseId   String
  course     Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime         @default(now())
  
  @@unique([studentId, courseId])
  @@map("student_enrollments")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

model User {
  id        String   @id @default(cuid()) @map("id") @db.VarChar(255)
  name      String
  email     String   @unique
  password  String   @db.Text  // In production, store hashed passwords
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model Location {
  id          String       @id @default(cuid()) @map("id") @db.VarChar(255)
  name        String       // e.g., "Gedung Utama", "Gedung Barat"
  description String?
  classrooms  Classroom[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@map("locations")
}

model Classroom {
  id          String     @id @default(cuid()) @map("id") @db.VarChar(255)
  name        String     // e.g., "Kelas 101", "Laboratorium Komputer"
  code        String     @unique // Unique code for the classroom
  locationId  String
  location    Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  capacity    Int        @default(30)
  description String?
  isActive    Boolean    @default(true)
  schedules   Schedule[] // Link to schedules that use this classroom
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@map("classrooms")
  @@unique([locationId, code])
}
